#include <Bindings.hpp> // only to not get complaints from clion

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#define M_PI 3.1415926

// TODO: don't hardcode this, quick fix for testing
int size = 512;

layout(std430, binding = PARAMS_BINDING) buffer Params {
    float scale;
    float angle;
    float depth;
    float fetch;
    float gamma;
    float swell;
    float windSpeed;
    float spreadBlend;
} params;

layout(rg32f, binding = NOISE_BINDING) uniform image2D noise;

layout(rg32f, binding = H0K_BINDING) uniform image2D H0K;
layout(rgba32f, binding = H0_BINDING) uniform image2D H0;
layout(rgba32f, binding = WAVEDATA_BINDING) uniform image2D wavedata;

uniform int conjugate;

// Horvath, C. J. (2015), 3. Nomenclature
// g - gravity
const float g = 9.81;
// ro - density of water = 1000
// sigma - surface tension coefficient = 0.074
const float sigmaOverRo = 0.074 / 1000;

// Horvath, C. J. (2015), eq. 9
float dispersion(float k) {
    return sqrt((g * k + sigmaOverRo * k * k * k) * tanh(min(k * params.depth, 10)));
}

// Horvath, C. J. (2015), eq. 62
float dispersionDerivative(float k) {
    float ch = cosh(min(k * params.depth, 10));
    float disp = dispersion(k);
    float dispSq = disp * disp;

    return (params.depth * (sigmaOverRo * k * k * k + g * k) / ch / ch + dispSq) / (2 * dispSq);
}

// Horvath, C. J. (2015), eq. 34
// Approximated by Ivan Pensionerov using SciPY
// See https://github.com/gasgiant/Ocean-URP/tree/main
float normalisationFactor(float s)
{
    float s2 = s * s;
    float s3 = s2 * s;
    float s4 = s3 * s;
    if (s < 5) {
        return -0.000564 * s4 + 0.00776 * s3 - 0.044 * s2 + 0.192 * s + 0.163;
    } else {
        return -4.80e-08 * s4 + 1.07e-05 * s3 - 9.53e-04 * s2 + 5.90e-02 * s + 3.93e-01;
    }
}

// Horvath, C. J. (2015), eq. 37
float hasslemann(float omega, float peakOmega) {
    if (omega <= peakOmega) {
        return 6.97 * pow(abs(omega / peakOmega), 4.06);
    } else {
        return 9.77 * pow(abs(omega / peakOmega), -2.33 - 1.45
            * ((params.windSpeed * peakOmega / g) - 1.17));
    }
}

// Horvath, C. J. (2015), eq. 45
float swell(float omega, float peakOmega, float theta) {
    return 16 * tanh(min(peakOmega / omega, 10)) * params.swell * params.swell;
}

// Horvath, C. J. (2015), eq. 33
float cosine2s(float theta, float s) {
    return normalisationFactor(s) * pow(abs(cos(theta * 0.5)), 2 * s);
}

// Horvath, C. J. (2015), eq. 42
float directionalSpectrum(float omega, float peakOmega, float theta) {
    float s = hasslemann(omega, peakOmega) + swell(omega, peakOmega, theta);
    return mix(2 / 3.1415 * cos(theta) * cos(theta),
               cosine2s(theta, s),
               params.spreadBlend);
}

// Horvath, C. J. (2015), eq. 28
float jonswapAlpha() {
    return 0.076 * pow(params.windSpeed * params.windSpeed / params.fetch / g, 0.22);
}

// Horvath, C. J. (2015), eq. 28
float jonswapPeakOmega() {
    return 22 * (g * g / params.windSpeed / params.fetch);
}

// Horvath, C. J. (2015), eq. 28
float jonswap(float omega, float peakOmega, float alpha) {
    float sigma;
    if (omega <= peakOmega) {
        sigma = 0.07;
    } else {
        sigma = 0.09;
    }

    float r = exp(-(omega - peakOmega) * (omega - peakOmega)
                  / 2 / sigma / sigma / peakOmega / peakOmega);
    float oneOverOmega = 1 / omega;
    float peakOmegaOverOmega = peakOmega / omega;
    return params.scale * alpha * g * g
            * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega
            * exp(-1.25 * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega)
            * pow(params.gamma, r);
}

// Horvath, C. J. (2015), eq. 29
float tmaCorrection(float omega) {
    float omegaH = omega * sqrt(params.depth / g);
    if (omegaH <= 1) {
        return 0.5 * omegaH * omegaH;
    } else {
        return 1 - 0.5 * (2.0 - omegaH) * (2.0 * omegaH);
    }
}

// Horvath, C. J. (2015), eq. 47
void main() {
    uvec3 id = gl_GlobalInvocationID;

    if (conjugate == 0) {
        float deltaK = 2 * M_PI / 1000.0;
        int nx = int(id.x - size / 2);
        int ny = int(id.y - size / 2);
        vec2 k = vec2(nx, ny) * deltaK;
        float kLength = length(k);
        vec2 noiseValue = imageLoad(noise, ivec2(id.xy)).rg;

        float kAngle = atan(k.y, k.x);
        float omega  = dispersion(kLength);
        float dOmegadk = dispersionDerivative(kLength);

        float alpha = jonswapAlpha();
        float peakOmega = jonswapPeakOmega();
        float spectrum = jonswap(omega, peakOmega, alpha) * tmaCorrection(omega) * directionalSpectrum(omega, peakOmega, kAngle);

        imageStore(wavedata, ivec2(id.xy), vec4(k.x, 1 / kLength, k.y, omega));
        imageStore(H0K, ivec2(id.xy), vec4(noiseValue * sqrt(2 * spectrum * dOmegadk / kLength), 0.0, 1.0));
    } else {
        vec2 h0K = imageLoad(H0K, ivec2(id.xy)).rg;
        vec2 h0MinusK = imageLoad(H0K, ivec2((size - id.x) % size, (size - id.y) % size)).rg;
        imageStore(H0, ivec2(id.xy), vec4(h0K.x, h0K.y, h0MinusK.x, -h0MinusK.y));
    }
}