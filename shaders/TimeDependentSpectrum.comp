#include <Globals.hpp>

layout(local_size_x = THREAD_NUMBER, local_size_y = THREAD_NUMBER, local_size_z = 1) in;

layout(rgba32f, binding = BUFFERS_UNIT) uniform image2DArray buffers;

layout(location = 0) uniform double time;

vec2 complexMul(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

void main() {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    vec4 wave = imageLoad(buffers, ivec3(id, WAVEDATA_INDEX));
    float phase = wave.w * float(time);
    vec2 exponent = vec2(cos(phase), sin(phase));
    vec4 h0 = imageLoad(buffers, ivec3(id, H0_INDEX));

    vec2 h = complexMul(h0.xy, exponent) + complexMul(h0.zw, vec2(exponent.x, -exponent.y));
    imageStore(buffers, ivec3(id, DY_INDEX), vec4(h, 0.0, 1.0));

    vec2 ih = vec2(-h.y, h.x);
    imageStore(buffers, ivec3(id, DYX_DYZ_INDEX), vec4(complexMul(ih, vec2(wave.x, wave.z)), 0.0, 1.0));
}