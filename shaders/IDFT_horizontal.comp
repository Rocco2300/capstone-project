#include <Globals.hpp>

layout(local_size_x = THREAD_NUMBER, local_size_y = THREAD_NUMBER, local_size_z = 1) in;

#define M_PI 3.1415926

layout(rgba32f, binding = BUFFERS_UNIT) uniform image2DArray buffers;

layout(location = 0) uniform int size;

vec2 complexMul(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

void main() {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);

    vec2 disp = vec2(0.0);
    vec2 norm = vec2(0.0);
    for (int x = 0; x < size; x++) {
        float phase = 2.0 * M_PI * x * id.x / size;
        vec2 exponent = vec2(cos(phase), sin(phase));

        vec2 dy = imageLoad(buffers, ivec3(x, id.y, DY_INDEX)).rg;
        vec2 dyx_dyz = imageLoad(buffers, ivec3(x, id.y, DYX_DYZ_INDEX)).rg;

        disp += complexMul(dy, exponent);
        norm += complexMul(dyx_dyz, exponent);
    }

    imageStore(buffers, ivec3(id, BUFFER_INDEX), vec4(disp, norm));
}