#version 460

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D displacement;
layout(rgba32f, binding = 1) uniform image2D normal;

void main() {
    const float amplitude = 1.0;
    const float frequency = 2.0 / 36.0;
    const vec2 waveDir = normalize(vec2(1.0, 0.0));
    const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    float height = amplitude * sin(dot(waveDir, texelCoord) * frequency);
    imageStore(displacement, texelCoord, vec4(vec3(height), 1.0));

    float deltaX = frequency * waveDir.x * amplitude * cos(dot(waveDir, texelCoord) * frequency);
    float deltaY = frequency * waveDir.y * amplitude * cos(dot(waveDir, texelCoord) * frequency);
    //vec3 normalVec = normalize(vec3(-deltaX, -deltaY, 0.0));
    vec3 tangent = vec3(0.0, 1.0, deltaY);
    vec3 binormal = vec3(1.0, 0.0, deltaX);
    vec3 normalVec = cross(binormal, tangent);
    normalVec = normalVec * 0.5 + 0.5;
    imageStore(normal, texelCoord, vec4(normalVec.xzy, 1.0));
}