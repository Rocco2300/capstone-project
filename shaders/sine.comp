#version 460

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D displacement;
layout(rgba32f, binding = 1) uniform image2D normal;

uniform float t;
uniform int waveNumber;

struct Wave {
    vec2 direction;
    float amplitude;
    float frequency;
    float phase;
};

layout(std430, binding = 3) buffer WaveData {
    Wave waves[];
};

void main() {
    const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec2 delta = vec2(0.0);
    float height = 0.0;
    for (int i = 0; i < waveNumber; i++) {
        vec2 dir = waves[i].direction;
        float amp = waves[i].amplitude;
        float freq = waves[i].frequency;
        float phase = waves[i].phase;
        height += amp * sin(dot(dir, texelCoord) * freq + t * phase);
        delta += freq * dir * amp * cos(dot(dir, texelCoord) * freq + t * phase);
    }

    imageStore(displacement, texelCoord, vec4(vec3(height), 1.0));

    vec3 tangent = vec3(0.0, 1.0, delta.y);
    vec3 binormal = vec3(1.0, 0.0, delta.x);
    vec3 normalVec = cross(binormal, tangent);
    normalVec = normalVec * 0.5 + 0.5;
    imageStore(normal, texelCoord, vec4(normalVec.xzy, 1.0));
}