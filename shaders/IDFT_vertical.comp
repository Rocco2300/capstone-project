#include <Globals.hpp>

layout(local_size_x = THREAD_NUMBER, local_size_y = THREAD_NUMBER, local_size_z = 1) in;

#define M_PI 3.1415926

layout(rgba32f, binding = BUFFERS_UNIT) uniform image2DArray buffers;

layout(location = 0) uniform int size;
layout(location = 1) uniform int scale;
layout(location = 2) uniform int permute;

vec2 complexMul(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

void main() {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);

    vec2 disp = vec2(0.0);
    vec2 norm = vec2(0.0);
    for (int y = 0; y < size; y++) {
        float phase = 2.0 * M_PI * y * id.y / size;
        vec2 exponent = vec2(cos(phase), sin(phase));

        vec2 dy = imageLoad(buffers, ivec3(id.x, y, BUFFER_INDEX)).rg;
        vec2 dyx_dyz = imageLoad(buffers, ivec3(id.x, y, BUFFER_INDEX)).ba;

        disp += complexMul(dy, exponent);
        norm += complexMul(dyx_dyz, exponent);
    }

    float h = disp.x;
    if (scale == 1) {
        h /= float(size * size);
        norm /= float(size * size);
    }
    if (permute == 1) {
        float perms[] = {1.0, -1.0};
        int index = int(mod(int(id.x + id.y), 2));
        float perm = perms[index];

        h *= perm;
        norm *= perm;
    }

    vec3 normalVec = normalize(vec3(-norm.x, 1.0, -norm.y));
    imageStore(buffers, ivec3(id, NORMAL_INDEX), vec4(normalVec, 1.0));
    imageStore(buffers, ivec3(id, DISPLACEMENT_INDEX), vec4(vec3(h), 1.0));
}