#include <Globals.hpp>

layout(local_size_x = THREAD_NUMBER, local_size_y = THREAD_NUMBER, local_size_z = 1) in;

#define M_PI 3.1415926

layout(rg32f, binding = DY_BINDING) uniform image2D Dy;
layout(rgba32f, binding = DISPLACEMENT_BINDING) uniform image2D displacement;
layout(rgba32f, binding = BUFFER_BINDING) uniform image2D buff;

uniform int size;
uniform bool scale;
uniform bool permute;

vec2 complexMul(vec2 a, vec2 b) {
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

void main() {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);

    vec2 result = vec2(0.0);
    for (int y = 0; y < size; y++) {
        float phase = 2.0 * M_PI * y * id.y / size;
        vec2 value = imageLoad(buff, ivec2(id.x, y)).rg;
        vec2 exponent = vec2(cos(phase), sin(phase));
        result += complexMul(value, exponent);
    }

    float h = result.x;
    if (scale) {
        h /= float(size * size);
    }
    if (permute) {
        float perms[] = {1.0, -1.0};
        int index = int(mod(int(id.x + id.y), 2));
        float perm = perms[index];
        h *= perm;
    }

    imageStore(displacement, id, vec4(vec3(h), 1.0));
}