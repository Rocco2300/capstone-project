diff --git a/CMakeLists.txt b/CMakeLists.txt
index c9dd62d..9549a72 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,6 +12,7 @@ include_directories(${CMAKE_BINARY_DIR}/external/gl3w/include)
 
 file(GLOB HEADERS include/*.hpp)
 add_executable(test ${CMAKE_SOURCE_DIR}/test/test.cpp ${HEADERS})
+add_executable(test1 ${CMAKE_SOURCE_DIR}/test/test1.cpp ${HEADERS})
 add_executable(${PROJECT_NAME} ${CMAKE_SOURCE_DIR}/main.cpp ${HEADERS})
 
 if(MSVC)
@@ -28,4 +29,5 @@ add_subdirectory(${CMAKE_SOURCE_DIR}/external/gl3w)
 add_subdirectory(${CMAKE_SOURCE_DIR}/external/imgui)
 
 target_link_libraries(test src glfw gl3w imgui)
+target_link_libraries(test1 src glfw gl3w imgui)
 target_link_libraries(${PROJECT_NAME} src glfw gl3w imgui)
\ No newline at end of file
diff --git a/include/Globals.hpp b/include/Globals.hpp
index be55df7..c118e18 100644
--- a/include/Globals.hpp
+++ b/include/Globals.hpp
@@ -10,9 +10,11 @@
 #define DY_INDEX 4
 #define DYX_DYZ_INDEX 5
 #define BUFFER_INDEX 6
-#define NORMAL_INDEX 7
-#define DISPLACEMENT_INDEX 8
+#define DISPLACEMENT_INDEX 7
+#define NORMAL_INDEX 8
+#define BUTTERFLY_INDEX 9
 
 #define PARAMS_BINDING 16
+#define REVERSED_BINDING 17
 
 #define THREAD_NUMBER 8
\ No newline at end of file
diff --git a/main.cpp b/main.cpp
index 816a137..f08186e 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,28 +1,47 @@
 #include "Camera.hpp"
+#include "DFT.hpp"
 #include "Globals.hpp"
 #include "Input.hpp"
 #include "Noise.hpp"
 #include "Plane.hpp"
 #include "Program.hpp"
 #include "Shader.hpp"
-#include "TextureManager.hpp"
-#include "DFT.hpp"
 #include "Spectrum.hpp"
+#include "TextureManager.hpp"
 
 #include <GL/gl3w.h>
 #include <GLFW/glfw3.h>
 #include <glm/gtc/constants.hpp>
+#include <glm/gtx/integer.hpp>
 
 #include <imgui.h>
 #include <imgui_impl_glfw.h>
 #include <imgui_impl_opengl3.h>
 
 #include <iostream>
+#include <memory>
 
-static void errorCallback(int error, const char *description) {
+static void errorCallback(int error, const char* description) {
     std::cerr << "Error: " << description << '\n';
 }
 
+std::unique_ptr<uint32[]> computeReversals(int size) {
+    int width  = glm::log2(size);
+    int height = size;
+
+    auto res = std::make_unique<uint32[]>(height);
+    for (int i = 0; i < height; i++) {
+        int index        = i;
+        unsigned int num = 0;
+        for (int j = 0; j < width; j++) {
+            num = (num << 1) + (index & 1);
+            index >>= 1;
+        }
+        res[i] = num;
+    }
+    return res;
+}
+
 int main() {
     if (!glfwInit()) {
         std::cerr << "GLFW initialization failed.\n";
@@ -32,7 +51,7 @@ int main() {
 
     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
-    GLFWwindow *window = glfwCreateWindow(1280, 720, "Capstone", nullptr, nullptr);
+    GLFWwindow* window = glfwCreateWindow(1280, 720, "Capstone", nullptr, nullptr);
     if (!window) {
         std::cerr << "Window creation failed.\n";
         glfwTerminate();
@@ -52,7 +71,7 @@ int main() {
         return -1;
     }
 
-    int size = 128;
+    int size = 256;
 
     Plane oceanPlane;
     oceanPlane.setSpacing(0.25f);
@@ -66,7 +85,7 @@ int main() {
     camera.setSpeed(3.f);
     camera.setSensitivity(100.f);
 
-    //TextureManager textureManager;
+    TextureManager textureManager;
     Noise noise(size, size);
     //textureManager.insert("noise", size, NOISE_BINDING, true).setData(noise.data());
     //textureManager.insert("normal", size, NORMAL_UNIT);
@@ -92,7 +111,8 @@ int main() {
     glTexImage3D(GL_TEXTURE_2D_ARRAY, 0, GL_RGBA32F, size, size, 12, 0, GL_RGBA, GL_FLOAT, nullptr);
     glBindImageTexture(BUFFERS_UNIT, textureArrayID, 0, GL_TRUE, 0, GL_READ_WRITE, GL_RGBA32F);
 
-    glTextureSubImage3D(textureArrayID, 0, 0, 0, NOISE_INDEX, size, size, 1, GL_RGBA, GL_FLOAT, noise.data());
+    glTextureSubImage3D(textureArrayID, 0, 0, 0, NOISE_INDEX, size, size, 1, GL_RGBA, GL_FLOAT,
+                        noise.data());
 
     glBindTexture(GL_TEXTURE_2D_ARRAY, 0);
 
@@ -110,20 +130,35 @@ int main() {
 
     glBindTexture(GL_TEXTURE_2D, 0);
 
+    auto windSpeed     = 25.f;
+    auto windDirection = glm::pi<float>() / 4.f;
+    auto wind          = glm::vec2(glm::cos(windDirection), glm::sin(windDirection)) * windSpeed;
     SpectrumParameters params{};
-    params.scale = 1.0f;
-    params.angle = 172.0f / 180.f * glm::pi<float>();
-    params.depth = 1000.0f;
-    params.fetch = 8000.0f;
-    params.gamma = 3.3f;
-    params.patchSize = 250.f;
-    params.windSpeed = 75.f;
-    params.spreadBlend = 0.25f;
+    params.a         = 4.0f;
+    params.patchSize = 1250.0f;
+    params.wind      = wind;
 
     DFT dft(size);
     Spectrum spectrum(size, params);
     spectrum.initialize();
 
+    auto reversal = computeReversals(size);
+    unsigned int ssbo;
+    glGenBuffers(1, &ssbo);
+    glBindBuffer(GL_SHADER_STORAGE_BUFFER, ssbo);
+    glBufferData(GL_SHADER_STORAGE_BUFFER, sizeof(uint32) * size, reversal.get(), GL_STATIC_DRAW);
+    glBindBufferBase(GL_SHADER_STORAGE_BUFFER, REVERSED_BINDING, ssbo);
+    glBindBuffer(GL_SHADER_STORAGE_BUFFER, 0);
+
+    Program program2;
+    ComputeShader shader2("../shaders/ButterflyTexture.comp");
+    program2.attachShader(shader2);
+    program2.validate();
+    program2.use();
+    program2.setUniform("size", size);
+    glDispatchCompute(glm::log2(size), size / 8, 1);
+    glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);
+
     VertexShader vertexShader("../shaders/ocean_surface.vert");
     FragmentShader fragmentShader("../shaders/ocean_surface.frag");
     Program program;
@@ -137,18 +172,15 @@ int main() {
     glEnable(GL_CULL_FACE);
     glEnable(GL_DEPTH_TEST);
 
-    //program.setUniform("size", size);
-    //glBindTexture(GL_TEXTURE_2D, textureManager.get("displacement"));
-    //program.setUniform("displacement", DISPLACEMENT_BINDING);
-    //glBindTexture(GL_TEXTURE_2D, textureManager.get("normal"));
-    //program.setUniform("normal", NORMAL_BINDING);
-    //program.setUniform("view", camera.getView());
-    //program.setUniform("model", oceanPlane.getTransform());
-    //program.setUniform("projection", camera.getProjection());
+    //program.setUniform("displacement", DISPLACEMENT_UNIT);
+    //program.setUniform("normal", NORMAL_UNIT);
+    program.setUniform("view", camera.getView());
+    program.setUniform("model", oceanPlane.getTransform());
+    program.setUniform("projection", camera.getProjection());
 
     IMGUI_CHECKVERSION();
     ImGui::CreateContext();
-    ImGuiIO &io = ImGui::GetIO();
+    ImGuiIO& io = ImGui::GetIO();
     (void) io;
     ImGui::StyleColorsDark();
     ImGui_ImplGlfw_InitForOpenGL(window, true);
@@ -156,14 +188,14 @@ int main() {
 
     float prev = glfwGetTime();
     while (!glfwWindowShouldClose(window)) {
-        float now = glfwGetTime();
+        float now       = glfwGetTime();
         float deltaTime = now - prev;
-        prev = now;
+        prev            = now;
 
         spectrum.update(now);
         dft.dispatchIDFT();
 
-        //program.use();
+        program.use();
         int width, height;
         glfwGetFramebufferSize(window, &width, &height);
         glViewport(0, 0, width, height);
@@ -171,7 +203,7 @@ int main() {
         camera.setPerspective(45.f, static_cast<float>(width) / glm::max(1, height));
         camera.update(deltaTime);
 
-        //program.setUniform("view", camera.getView());
+        program.setUniform("view", camera.getView());
 
         ImGui_ImplOpenGL3_NewFrame();
         ImGui_ImplGlfw_NewFrame();
@@ -191,9 +223,9 @@ int main() {
         glClearColor(0.f, 0.f, 0.f, 0.f);
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
-        //oceanPlane.bind();
-        //glDrawElements(GL_TRIANGLES, oceanPlane.getIndices().size(), GL_UNSIGNED_INT, 0);
-        //oceanPlane.unbind();
+        oceanPlane.bind();
+        glDrawElements(GL_TRIANGLES, oceanPlane.getIndices().size(), GL_UNSIGNED_INT, 0);
+        oceanPlane.unbind();
 
         ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
         glfwSwapBuffers(window);
diff --git a/shaders/IDFT_horizontal.comp b/shaders/IDFT_horizontal.comp
index 2474714..46f57e8 100644
--- a/shaders/IDFT_horizontal.comp
+++ b/shaders/IDFT_horizontal.comp
@@ -18,6 +18,10 @@ void main() {
     vec2 disp = vec2(0.0);
     vec2 norm = vec2(0.0);
     for (int x = 0; x < size; x++) {
+        vec4 wavedata = imageLoad(buffers, ivec3(x, id.y, WAVEDATA_INDEX));
+
+        vec2 wave = vec2(wavedata.x, wavedata.z);
+        //float phase = dot(wave, id);
         float phase = 2.0 * M_PI * x * id.x / size;
         vec2 exponent = vec2(cos(phase), sin(phase));
 
diff --git a/shaders/IDFT_vertical.comp b/shaders/IDFT_vertical.comp
index c50784f..35c73c1 100644
--- a/shaders/IDFT_vertical.comp
+++ b/shaders/IDFT_vertical.comp
@@ -20,6 +20,10 @@ void main() {
     vec2 disp = vec2(0.0);
     vec2 norm = vec2(0.0);
     for (int y = 0; y < size; y++) {
+        vec4 wavedata = imageLoad(buffers, ivec3(id.x, y, WAVEDATA_INDEX));
+
+        vec2 wave = vec2(wavedata.x, wavedata.z);
+        //float phase = dot(wave, id);
         float phase = 2.0 * M_PI * y * id.y / size;
         vec2 exponent = vec2(cos(phase), sin(phase));
 
@@ -47,4 +51,6 @@ void main() {
     vec3 normalVec = normalize(vec3(-norm.x, 1.0, -norm.y));
     imageStore(buffers, ivec3(id, NORMAL_INDEX), vec4(normalVec, 1.0));
     imageStore(buffers, ivec3(id, DISPLACEMENT_INDEX), vec4(vec3(h), 1.0));
+    //imageStore(normal, id, vec4(normalVec, 1.0));
+    //imageStore(displacement, id, vec4(vec3(h), 1.0));
 }
\ No newline at end of file
diff --git a/shaders/ocean_surface.frag b/shaders/ocean_surface.frag
index 8c23c3a..bdec0e3 100644
--- a/shaders/ocean_surface.frag
+++ b/shaders/ocean_surface.frag
@@ -1,7 +1,14 @@
 layout (location = 0) out vec4 color;
 
-in vec4 outColor;
+in vec4 outNormal;
 
 void main() {
-    color = outColor;
+    //vec3 lightPos = vec3(2.0, 128.0, 0.0);
+    //vec3 lightDir = normalize(finalPos.xyz - lightPos);
+    vec3 norm = vec3(outNormal);
+    vec3 lightDir = normalize(vec3(-2.0, -1.0, 0.0));
+    float shadow  = max(0.01, dot(-lightDir, norm));
+
+    vec4 waterColor = vec4(0.1, 0.3, 0.7, 1.0);
+    color = shadow * waterColor;
 }
\ No newline at end of file
diff --git a/shaders/ocean_surface.vert b/shaders/ocean_surface.vert
index 8790886..6970bd5 100644
--- a/shaders/ocean_surface.vert
+++ b/shaders/ocean_surface.vert
@@ -1,33 +1,23 @@
+#include <Globals.hpp>
+
 layout (location = 0) in vec4 position;
 layout (location = 1) in vec2 texCoord;
 
-uniform int size;
+layout(rgba32f, binding = BUFFERS_UNIT) uniform image2DArray buffers;
 
 uniform mat4 view;
 uniform mat4 model;
 uniform mat4 projection;
 
-uniform sampler2D normal;
-uniform sampler2D displacement;
-
-out vec4 outColor;
+out vec4 outNormal;
 
 void main() {
-    vec2 coords = position.xz / (size * 0.25);
-    vec4 height = texture(displacement, coords);
+    vec2 coords = position.xz * (1.0 / 0.25);
+    vec4 height = imageLoad(buffers, ivec3(coords, DISPLACEMENT_INDEX));
     vec4 finalPos = position;
     finalPos.y = height.x;
     finalPos = model * finalPos;
 
-    vec3 normalVec = texture(normal, coords).xyz;
-    normalVec = normalize(normalVec * 2.0 - 1.0);
-    vec3 lightPos = vec3(128.0, 128.0, 0.0);
-    vec3 lightDir = normalize(finalPos.xyz - lightPos);
-    //vec3 lightDir = normalize(vec3(-1.0, -1.0, 0.0));
-    float shadow  = max(0.0, dot(-lightDir, normalVec));
-
-    vec4 waterColor = vec4(0.1, 0.3, 0.7, 1.0);
-    outColor = shadow * waterColor;
-
     gl_Position = projection * view * finalPos;
+    outNormal = imageLoad(buffers, ivec3(coords, NORMAL_INDEX));
 }
\ No newline at end of file
diff --git a/src/Shader.cpp b/src/Shader.cpp
index 2583ca9..aeaa128 100644
--- a/src/Shader.cpp
+++ b/src/Shader.cpp
@@ -105,8 +105,10 @@ void Shader::load(const std::string& filePath) {
         code.erase(index, code.find('\n', index) + 1);
 
         m_sourceCode += header;
+        m_sourceCode += '\n';
     }
 
     m_sourceCode += code;
     m_sourceCode += '\n';
+    std::cout << m_sourceCode << '\n';
 }
diff --git a/src/Spectrum.cpp b/src/Spectrum.cpp
index 210974f..78b17af 100644
--- a/src/Spectrum.cpp
+++ b/src/Spectrum.cpp
@@ -9,7 +9,7 @@ Spectrum::Spectrum(int size, const SpectrumParameters& params) {
     m_size = size;
 
     ComputeShader spectrumShader;
-    spectrumShader.load("../shaders/InitialSpectrum.comp");
+    spectrumShader.load("../shaders/PhillipsSpectrum.comp");
     m_initialProgram.attachShader(spectrumShader);
     m_initialProgram.validate();
     m_initialProgram.use();
diff --git a/test/test.cpp b/test/test.cpp
index ee6e7f6..2a7edd8 100644
--- a/test/test.cpp
+++ b/test/test.cpp
@@ -44,7 +44,6 @@ void createTexture(int binding) {
     glBindImageTexture(binding, textureViewID, 0, GL_TRUE, 0, GL_READ_WRITE, GL_RGBA32F);
 
     glBindTexture(GL_TEXTURE_2D, 0);
-
 }
 
 struct MinMax {
